// Localisation.h
// (c) 06/2006, Daniel Westhoff 
// westhoff@informatik.uni-hamburg.de


/** @defgroup Localization Localization: Selbst-Lokalisierung für mobile Roboter.
 *  Klassen zur Selbst-Lokalisierung der mobilen Plattform.
 *  @{
 */

#ifndef _LOCALIZATION_H_
#define _LOCALIZATION_H_

#include "iotypes.h"
#include "math/vec.h"
#include "math/mat.h"
#include "mobile/motorFeeder.h"
#include "thread/mutex.h"
#include "pose.h"

/**
 * @brief Selbst-Lokalisierung für den mobilen Roboter <b>TASER</b> des AB TAMS.
 *
 * @section author Author
 *   Daniel Westhoff (westhoff@informatik.uni-hamburg.de)
 * @section date Copyright
 *   (c) 2006-2006
 */

// uses /vol/biorob/share/map.marks

class CLOCALIZATION 
{
 public:  

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Konstruktor.
  ////////////////////////////////////////////////////////////////////////////////////////////

  CLOCALIZATION (const CVEC pose, const CMOTORFEEDER* motorFeeder);

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Destruktor.
  ////////////////////////////////////////////////////////////////////////////////////////////

  virtual ~CLOCALIZATION (void);

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Sagt die Pose des Roboters anhand des übergebenen Zeitintervals und 
  /// der Sollwerte für die Geschwindigkeiten vorher.
  ///////////////////////////////////////////////////////////////////////////////////////////

  void Predict (const microseconds_t dt);

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Aktualisiert die Schätzung der Pose des Roboters anhand 
  /// der übergebenen Messung
  ///////////////////////////////////////////////////////////////////////////////////////////

  void Update (meter_t measuredDistanceToMark,
	       radiant_t measuredAngleToMark,
	       meter_t markX,
	       meter_t markY);

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Setzt eine neue Roboter Pose.
  ///////////////////////////////////////////////////////////////////////////////////////////
  
  void SetPose (const CVEC pose);

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Liefert die aktuelle Schätzung der Pose.
  ///////////////////////////////////////////////////////////////////////////////////////////
  
  const CVEC GetPose (void); 


 private:

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Mutex 
  ////////////////////////////////////////////////////////////////////////////////////////////

  CMUTEX _mutex;

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Mutex setzen
  ////////////////////////////////////////////////////////////////////////////////////////////

  void Lock (void)
  {
    _mutex.Lock ();
  }

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Mutex aufheben
  ////////////////////////////////////////////////////////////////////////////////////////////

  void Unlock (void)
  {
    _mutex.Unlock ();
  }

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Hält einen Winkel zwischen -180.0 und +180.0 Grad
  ////////////////////////////////////////////////////////////////////////////////////////////

  void ClipAngle (radiant_t &angle);

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Initialisierung der Kovarianzmatrix
  ////////////////////////////////////////////////////////////////////////////////////////////

  void InitCovariance (void);

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Poseschätzung des Roboters.
  ////////////////////////////////////////////////////////////////////////////////////////////

  CPOSE* _pose;

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Schätzung der Konvarianzmatrix der Pose des Roboters.
  ////////////////////////////////////////////////////////////////////////////////////////////
  
  float _P [3][3];

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// Pose des Roboters.
  ////////////////////////////////////////////////////////////////////////////////////////////

  const CMOTORFEEDER* _motorFeeder;



};

#endif

/** @} */ // end of group Localization
